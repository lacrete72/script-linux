#!/bin/bash

# V√©rifie si le script est ex√©cut√© en tant que root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED} Ce script doit √™tre ex√©cut√© avec les droits root (sudo).${NC}"
    exit 1
fi

# Obtenir la liste des interfaces r√©seau (hors lo)
interfaces=($(ip -o link show | awk -F': ' '{print $2}' | grep -v lo))

# Affiche les interfaces disponibles
echo "Interfaces r√©seau d√©tect√©es :"
for i in "${!interfaces[@]}"; do
    echo "$((i+1))) ${interfaces[$i]}"
done

# Demande √† l'utilisateur de choisir une interface
read -p "S√©lectionnez une interface (1-${#interfaces[@]}) : " choix
if ! [[ "$choix" =~ ^[1-9][0-9]*$ ]] || (( choix < 1 || choix > ${#interfaces[@]} )); then
    echo -e "${RED} Choix invalide.${NC}"
    exit 1
fi

interface=${interfaces[$((choix-1))]}
echo "Interface s√©lectionn√©e : $interface"

# Demande l'adresse IP
read -p "Adresse IP (ex: 192.168.1.100) : " ip

# Demande le masque de sous-r√©seau
read -p "Masque de sous-r√©seau (ex: 255.255.255.0) : " netmask

# Demande la passerelle
read -p "Passerelle (ex: 192.168.1.1) : " gateway

# Sauvegarde l'ancien fichier
cp /etc/network/interfaces /etc/network/interfaces.bak

# √âcriture de la nouvelle configuration
cat > /etc/network/interfaces <<EOF
# Fichier g√©n√©r√© automatiquement
auto lo
iface lo inet loopback

auto $interface
iface $interface inet static
    address $ip
    netmask $netmask
    gateway $gateway
EOF

echo "‚úÖ Configuration appliqu√©e √† $interface"
echo "üìÅ Sauvegarde cr√©√©e : /etc/network/interfaces.bak"

# Demande de red√©marrage
read -p "Red√©marrer le r√©seau maintenant ? (y/n) : " restart
if [[ "$restart" =~ ^[Yy]$ ]]; then
    systemctl restart networking
    echo "üîÅ Service r√©seau red√©marr√©."
else
    echo "‚ÑπÔ∏è Red√©marrage manuel requis pour appliquer la configuration."
fi

